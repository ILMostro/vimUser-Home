{"name":"Vimuser-home","tagline":"VIM/Vi config options housed under /home/user/.vim/","body":"### Vim Users' Configuration Scripts\r\n\r\nexecute\r\n\r\n```bash\r\n    git clone https://github.com/ILMostro/vimUser-Home.git\r\n    cd vimUser-Home/\r\n    ./addplugins.sh\r\n```\r\n\r\nto download this repo into the current directory; by executing\r\nthe `addplugins.sh` script, \r\n\r\n- the `vimUser-Home` folder is populated with the `pathogen` plugin for `vim`, \r\n- the `bundle` directory is created, \r\n- and the list of chosen vim-plugins are initialized as submodules in the `bundle` directory.\r\n\r\nvimUser-Home\r\n============\r\nThis repo holds various snippets, templates, and other configuration options\r\nfor VIM-7.2+, which I prefer to keep in the user's home directory under\r\n  `/home/user/.vim/`\r\nI'd like to point out that this README file has become a Notepad of\r\nsorts to mark, copy, paraphrase, and expand on the bits and pieces\r\nof particular interest from the book\r\n[Hacking Vim](http://www.packtpub.com/hacking-vim-cookbook-get-most-out-latest-vim-editor/book)\r\nby Kim Schulz. It's the best source of\r\nvaluable advice in a concise and functional writing style.\r\nThough, it's not the only source of information upon which this\r\nsite is based, it *is* the most useful to me; both in its scope\r\nabout the seemingly limitless power of vim as well as in its\r\nfunctional writing style, which tames vim long enough for the reader\r\nto understand it and, perhaps, adapt it to his/her own workflow.\r\n\r\n**Templates**\r\n-------------\r\nThe [templates folder] holds language-specific template files which all\r\nhave the \".tpl\" file extension. Their contents are inserted into a\r\nnewly-created page with the various language-specific file extensions,\r\ni.e. `html.tpl`, `java.tpl`, `c.tpl`, etc.\r\nMeaning, when you create a new file, e.g. index.html, VIM will use\r\nthe template named html.tpl (whatever you decide to include in it) to fill in\r\nthe skeleton of the new file you'll want to create.  **VIM only does this\r\nwith newly-created files, not with existing files** which already contain\r\ntheir own lines of code/text.\r\nYou are free to create templates for any programming language as long\r\nas they adhere to the above-mentioned naming standards.\r\n*IMPORTANT:*\r\nThose \"templates\" need to be sourced in user's `.vimrc` file like so:\r\n\r\n    autocmd BufNewFile * silent! 0r $HOME/.vim/templates/%:e.tpl\r\n\r\nFurther options include creating *placeholders* and mapping\r\na shortcut key to jump between them as you insert the text.\r\nFor example, in the HTML template:\r\n\r\n    <title><+INSERT TITLE+></title>\r\n\r\nThe following key-mapping binds `Ctrl-k` to jump between the\r\nplaceholders enclosed with the `<+ +>` tags.\r\n\r\n    au FileType html nnoremap <c-k> /<+.\\{-1,}+><cr>c/+>/e<cr>\r\n    \r\nThis will ensure that the mapping works in INSERT mode as well:\r\n\r\n    au FileType html inoremap <c-k> <ESC>/<+.\\{-1,}+><cr>c/+>/e<cr>\r\n\r\nAlternatively, you can leave out the `au FileType html` part of the\r\nkeymapping to apply it to all filetypes (as long as you put placeholders\r\nbetween `<+ +>` tags); or, you can just append more filetypes in a\r\ncomma-separated list: `html,java,c`,...etc.\r\n\r\n  -*Abbreviations as Templates*-\r\nIn order to expedite the workflow when coding, we can use the Abbreviations\r\nmethod to, essentially create templates on a smaller scale: i.e. by creating\r\na `html.patterns.tpl` file in our [templates] directory, we can for patterns\r\ninstead of just for FileTypes.\r\n\r\n**Key-mapping**\r\n---------------\r\nFurthermore, the shortcut key-mappings are all stored in the confDotvim/mappings.vim file.\r\nOnce again, they are sourced in the '.vimrc' file as such:\r\n    \r\n    `source /home/user/.vim/confDotvim/mappings.vim`\r\n    \r\n\r\nAlso, the abbreviations.vim file holds, tadaa! abbreviations, what else.\r\nSet them in INSERT-mode (`iabbr`) commandline-mode (`cabbr`)\r\n  Find more info about abbreviations in VIM at the following link\r\n  as well as the other listed links at the bottom of that page:\r\n  http://vim.wikia.com/wiki/Using_abbreviations\r\n  \r\n***install-plugins*** **Script**\r\n----------------------------\r\nLastly, the addplugins.sh file is a copied/customized/edited version of\r\none included in [sontek's github/dotfiles repo](https://github.com/sontek/dotfiles) .\r\nIt's also referenced in his\r\n[tutorial](http://sontek.net/blog/detail/turning-vim-into-a-modern-python-ide)\r\non using VIM for coding in Python.\r\n    \r\n    \r\n\r\nMORE TO COME...\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}